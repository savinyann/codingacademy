#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>

void	my_putchar(char c);
int	n_base(int roof, int floor);
int	build_subfloor(int roof, int subfloor, int nb_base, int n_init, int n_init_sub_floor);



int	n_base(int roof, int floor)
{
  int	nb_leaves;
  
  if(floor == 0)
    {
      return(1);
    }  
  if(floor <= roof)
    {
      nb_leaves = n_base(roof, floor - 1) + 2 * (floor + 2) - 2 * (floor / 2);
      printf("floor %d, nb_leaves = %d\n", floor, nb_leaves);
    }
  return(nb_leaves);
}








int	build_floor(int roof, int floor, int nb_base, int n_init_floor)
{
  int	i;
 // * (floor / 2 + 1);
  if(floor != roof)
    {
      n_init_floor =  build_subfloor(roof, floor, 0, nb_base, 0);
      // printf("n_init_floor = %d\n", n_init_floor);
      build_floor(roof, floor + 1, nb_base, n_init_floor);
    }
}


int	build_subfloor(int roof, int floor, int subfloor, int nb_base, int n_init)
{
  int	i;
  int	nb_at_sf;
  int	n_leaves;

  n_leaves = n_base(roof, floor);
  //printf("n_leaves = %d\n", n_leaves);
  //return(0);
  if(subfloor != floor +4)
    {
      i = 0; // Nombre d'espace devant les étoiles.
      while( i <= nb_base/2 - subfloor - n_init - n_leaves ) // KO
	{
	  my_putchar(' ');
	  i++;
	}
      i = 0; // Nombre d'étoile par ligne.
      while( i != n_leaves + subfloor * 2)//+ 2 * subfloor + n_init_sub_floor)// n_init_sub_floor) // KO
	{
	  my_putchar('*');
	  nb_at_sf = i;
	  i++;
	}
      my_putchar('\n');
      nb_at_sf = build_subfloor(roof, floor, subfloor + 1, nb_base, n_init);
    }
  return(i);
}



int	main(int c, char **v)
{
  int	roof;
  int	nb_base;
  
  if (c != 2)
    {
      printf("Error: wrong parameters number.\n");
      return(0);
    }
  roof = atoi(v[1]);
  nb_base = n_base(roof, roof);
  printf("Le nombre de feuilles a la base du premier etage est de %d\n", nb_base);
  build_floor(roof, 0, nb_base, 0);
}


void	my_putchar(char c)
{
  write(1, &c, 1);
}





/*
void	fst_build_subfloor(int roof, int floor,  int nb)
{
  int	i;
  int	subfloor;

  subfloor = 0;
  while(subfloor != floor + 3)
    {
      i = 0;
      while( i != nb/2 - subfloor )
	{
	  my_putchar(' ');
	  i++;
	}
      i = 0;
      while( i != 2 * subfloor + 1 )
	{
	  my_putchar('*');
	  i++;
	}
      my_putchar('\n');
      subfloor++;
    }
}


int	build_floor(int previous_floor, int  previous_n_leaves, int roof)
{
  int	i;
  int	n_leaves;
  int	floor;

  nb_leaves = previous_n_leaves + 2 * (floor + 2) - 2 * (floor / 2);
  floor = previous_floor + 1;
  if(floor <= roof)
    {
      next_n_leaves = build_floor(floor, n_leaves, roof);
    }
  while(i != n_leaves)
    {
      my_putchar(' ');
    }
  i = 0;
  while(i != 2 n_leaves + 1)
    {
      my_putchar('*');
    }
}


int	build_subfloor(int floor, int previous_subfloor, int previous_n_leaves)
{
  int	i;
  int	n_leaves;
  int	subfloor;

  i = 0;
  n_leaves = previous_n_leaves + 2;
  subfloor = previous_subfloor + 1; 
  if(subfloor <= floor + 3)
    {
      while(i < ( n_leaves - 1 ) / 2)
	{
	  my_putchar(" ");
	}	  
      while(i < n_leaves)
	{
	  my_putchar('*');
	  i++;
	}
    }
}












intbuild_subfloor(int previous_subfloor)
{
  int	n;
  int	subfloor;

  n = 0;
  subfloor = previous_subfloor + 2;
  build_subfloor(subfloor);
  if (previous_subfloor != 0)
    {
      while(n != previous_subfloor + 2)
	{
	  my_putchar('*');
	}
      my_putchar('\n');
    }

  return(previous_subfloor);
}


int	main(int c, char **v)
{
  int n;
  
  if (c != 2)
    {
      return(0);
    }
  n = atoi(v[1]);
  build_subfloor(n);
}





void	my_putchar(char c)
{
  write(1, &c, 1);
}


void	base(int size)
{
  my_putchar('|');
}




int	my_atoi(char *v)
{
  int	i;
  int	n;
  
  i = 0;
  n = 0;
  while(v[i] >= 48 && v[i] <=57)
    {
      n = 10 * n + v[i] - 48;
      i++;
    }
  return(n);
}






void	sapin(int size)
{
  feuilles(size);
  tronc(size);
}


int	leaves(int n_leaf, int floor)
{
  int	n;
  
  n = 0
  if (n_leaf >= 1)
    {
      while(n != n_leaf + 2 * (floor+2) - 2 * (floor / 2))
	{
	  build_floor(n_leaf, floor);
	}
    }
  return(size);
}


int	*build_floor(int *previous_floor)
{
  int	n;
  int	*floor;

  n = 0;
  floor = malloc(2 * sizeof(int));
  if(floor == NULL)
    {
      return(NULL);
    }
  floor[0] = previous_floor[0] + 1
  floor[1] = previous_floor[1] + 2 * (floor[0] + 2) - 2 * (floor[0]/2);
  build_subfloor(int *sub_floor);
    }
}
*/
