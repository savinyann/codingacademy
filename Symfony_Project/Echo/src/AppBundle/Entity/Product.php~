<?php

namespace AppBundle\Entity;

use Gedmo\Mapping\Annotation as Gedmo;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Symfony\Component\Validator\Constraints as Assert;


/**
 * Product
 *
 * @ORM\Table(name="product")
 * @ORM\Entity(repositoryClass="AppBundle\Repository\ProductRepository")
 */
class Product
{
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="title", type="string", length=150)
     */
    private $title;

    /**
     * @var string
     *
     * @ORM\Column(name="description", type="text")
     */
    private $description;

    /**
     * @var string
     *
     * @ORM\Column(name="price", type="float")
     */
    private $price;

    /**
     * @var string
     *
     * @ORM\Column(name="starting_price", type="float", nullable=true)
     */
    private $startingPrice;

    /**
     * @var string
     *
     * @ORM\Column(name="minBid", type="float")
     */
    private $minBid;

    /**
     * @var string
     *
     * @ORM\Column(name="autobid", type="float", nullable=true)
     */
    private $autobid;

    /**
     * @ORM\ManyToOne(targetEntity="User", inversedBy="autobidding")
     * @ORM\JoinColumn(name="autobidder_id", referencedColumnName="id")
     */
    private $autobidder;

    /**
     * @var string
     *
     * @ORM\Column(name="currentbid", type="float", nullable=true)
     */
    private $currentbid;

    /**
     * @ORM\ManyToOne(targetEntity="User", inversedBy="buying")
     * @ORM\JoinColumn(name="buyer_id", referencedColumnName="id")
     */
    private $currentbuyer;

    /**
     * @var array
     *
     * @ORM\Column(name="visited_by", type="array")
     */
    private $visitedBy;

    /**
     * @var \DateTime $created
     *
     * @Gedmo\Timestampable(on="create")
     * @ORM\Column(type="datetime")
     */
    private $created;

    /**
     * @var \DateTime $updated
     *
     * @Gedmo\Timestampable(on="update")
     * @ORM\Column(type="datetime")
     */
    private $updated;

    /**
     * @var \DateTime $started
     *
     * @ORM\Column(type="datetime")
     */
    private $started;

    /**
     * @var \DateTime $ended
     *
     * @ORM\Column(type="datetime")
     */
    private $ended;

    /**
     * @ORM\ManyToOne(targetEntity="User", inversedBy="products")
     * @ORM\JoinColumn(name="user_id", referencedColumnName="id")
     */
    private $user;

    /**
     * @ORM\OneToMany(targetEntity="Product_Comment", mappedBy="product")
     */
    private $comments;

    /**
     * @ORM\OneToMany(targetEntity="Product_Picture", mappedBy="product")
     */
    private $pictures;

    /**
     * @ORM\ManyToOne(targetEntity="Category", inversedBy="products")
     * @ORM\JoinColumn(name="category_id", referencedColumnName="id")
     */
    private $category;



    /*************
     *
     * Constructor
     *
     ************/
    public function __construct()
    {
        $this->comments = new ArrayCollection();
        $this->pictures = new ArrayCollection();
        $this->visitedBy = [];
        $this->started = new \DateTime();
        $this->ended = new \DateTime("+1 day");
    }

    /*************
     *
     * toString
     *
     ************/
    public function __toString()
    {
        return($this->title);
    }


    /**
     * Get id
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set title
     *
     * @param string $title
     *
     * @return Product
     */
    public function setTitle($title)
    {
        $this->title = $title;

        return $this;
    }

    /**
     * Get title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * Set description
     *
     * @param string $description
     *
     * @return Product
     */
    public function setDescription($description)
    {
        $this->description = $description;

        return $this;
    }

    /**
     * Get description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Set price
     *
     * @param string $price
     *
     * @return Product
     */
    public function setPrice($price)
    {
        $this->price = $price;

        return $this;
    }

    /**
     * Get price
     *
     * @return string
     */
    public function getPrice()
    {
        return $this->price;
    }

    /**
     * Set startingPrice
     *
     * @param string $startingPrice
     *
     * @return Product
     */
    public function setStartingPrice($startingPrice)
    {
        $this->startingPrice = $startingPrice;

        return $this;
    }

    /**
     * Get startingPrice
     *
     * @return string
     */
    public function getStartingPrice()
    {
        return $this->startingPrice;
    }

    /**
     * Set minBid
     *
     * @param string $minBid
     *
     * @return Product
     */
    public function setMinBid($minBid)
    {
        $this->minBid = $minBid;

        return $this;
    }

    /**
     * Get minBid
     *
     * @return string
     */
    public function getMinBid()
    {
        return $this->minBid;
    }

    /**
     * Set autobid
     *
     * @param array $autobid
     *
     * @return Product
     */
    public function setAutobid($autobid)
    {
        $this->autobid = $autobid;

        return $this;
    }

    /**
     * Get autobid
     *
     * @return array
     */
    public function getAutobid()
    {
        return $this->autobid;
    }

    /**
     * Set visitedBy
     *
     * @param array $visitedBy
     *
     * @return Product
     */
    public function setVisitedBy($visitedBy)
    {
        $this->visitedBy = $visitedBy;

        return $this;
    }

    /**
     * Get visitedBy
     *
     * @return array
     */
    public function getVisitedBy()
    {
        return $this->visitedBy;
    }

    /**
     * Set user
     *
     * @param \AppBundle\Entity\User $user
     *
     * @return Product
     */
    public function setUser(\AppBundle\Entity\User $user = null)
    {
        $this->user = $user;

        return $this;
    }

    /**
     * Get user
     *
     * @return \AppBundle\Entity\User
     */
    public function getUser()
    {
        return $this->user;
    }

    /**
     * Add comment
     *
     * @param \AppBundle\Entity\Product_Comment $comment
     *
     * @return Product
     */
    public function addComment(\AppBundle\Entity\Product_Comment $comment)
    {
        $this->comments[] = $comment;

        return $this;
    }

    /**
     * Remove comment
     *
     * @param \AppBundle\Entity\Product_Comment $comment
     */
    public function removeComment(\AppBundle\Entity\Product_Comment $comment)
    {
        $this->comments->removeElement($comment);
    }

    /**
     * Get comments
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getComments()
    {
        return $this->comments;
    }

    /**
     * Add picture
     *
     * @param \AppBundle\Entity\Product_Picture $picture
     *
     * @return Product
     */
    public function addPicture(\AppBundle\Entity\Product_Picture $picture)
    {
        $this->pictures[] = $picture;

        return $this;
    }

    /**
     * Remove picture
     *
     * @param \AppBundle\Entity\Product_Picture $picture
     */
    public function removePicture(\AppBundle\Entity\Product_Picture $picture)
    {
        $this->pictures->removeElement($picture);
    }

    /**
     * Get pictures
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getPictures()
    {
        return $this->pictures;
    }

    /**
     * Set category
     *
     * @param \AppBundle\Entity\Category $category
     *
     * @return Product
     */
    public function setCategory(\AppBundle\Entity\Category $category = null)
    {
        $this->category = $category;

        return $this;
    }

    /**
     * Get category
     *
     * @return \AppBundle\Entity\Category
     */
    public function getCategory()
    {
        return $this->category;
    }

    /**
     * Set created
     *
     * @param \DateTime $created
     *
     * @return Product
     */
    public function setCreated($created)
    {
        $this->created = $created;

        return $this;
    }

    /**
     * Get created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->created;
    }

    /**
     * Set updated
     *
     * @param \DateTime $updated
     *
     * @return Product
     */
    public function setUpdated($updated)
    {
        $this->updated = $updated;

        return $this;
    }

    /**
     * Get updated
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->updated;
    }

    /**
     * Set started
     *
     * @param \DateTime $started
     *
     * @return Product
     */
    public function setStarted($started)
    {
        $this->started = $started;

        return $this;
    }

    /**
     * Get started
     *
     * @return \DateTime
     */
    public function getStarted()
    {
        return $this->started;
    }

    /**
     * Set ended
     *
     * @param \DateTime $ended
     *
     * @return Product
     */
    public function setEnded($ended)
    {
        $this->ended = $ended;

        return $this;
    }

    /**
     * Get ended
     *
     * @return \DateTime
     */
    public function getEnded()
    {
        return $this->ended;
    }

    /**
     * Set currentbid
     *
     * @param array $currentbid
     *
     * @return Product
     */
    public function setCurrentbid($currentbid)
    {
        $this->currentbid = $currentbid;

        return $this;
    }

    /**
     * Get currentbid
     *
     * @return array
     */
    public function getCurrentbid()
    {
        return $this->currentbid;
    }

    /**
     * Set currentbuyer
     *
     * @param \AppBundle\Entity\User $currentbuyer
     *
     * @return Product
     */
    public function setCurrentbuyer(\AppBundle\Entity\User $currentbuyer = null)
    {
        $this->currentbuyer = $currentbuyer;

        return $this;
    }

    /**
     * Get currentbuyer
     *
     * @return \AppBundle\Entity\User
     */
    public function getCurrentbuyer()
    {
        return $this->currentbuyer;
    }


    /**
     * @Assert\IsTrue(message="Price can not be smaller than Starting Price plus a minimum bid. Use your brain a little, please.")
     */
    public function isStartingPriceSmallerThanPrice()
    {
        if($this->startingPrice)
        {
            return($this->price > $this->startingPrice + $this->minBid);
        }
        return(true);
    }


    /**
     * @Assert\IsTrue(message="Please place your product in a category.")
     */
    public function isInACategory()
    {
        return($this->category != "");
    }


    /**
     * @Assert\IsTrue(message="Your bid can not end before it has started.")
     */
    public function isEndedAfterStarted()
    {
        return($this->ended > $this->started);
    }
}
